import React, { useState, useEffect, useMemo } from "react";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import PayRollData from "../data/payroll_data.json";

const PAYROLL_STORAGE_KEY = "payroll_records";

const PayRoll = () => {
  const initialEmployees = PayRollData.payrollData;

  const [employees, setEmployees] = useState(() => {
    const saved = localStorage.getItem(PAYROLL_STORAGE_KEY);
    if (saved) {
      try {
        return JSON.parse(saved);
      } catch {
        return initialEmployees;
      }
    }
    return initialEmployees;
  });

  const [selectedEmployee, setSelectedEmployee] = useState(null);

  const totalMonthlyPay = useMemo(() => {
    return employees.reduce((acc, emp) => acc + Number(emp.finalSalary || 0), 0);
  }, [employees]);

  useEffect(() => {
    localStorage.setItem(PAYROLL_STORAGE_KEY, JSON.stringify(employees));
    localStorage.setItem("total_payroll", JSON.stringify(totalMonthlyPay));
  }, [employees, totalMonthlyPay]);

  const downloadPayslipPDF = (emp) => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    const centerX = pageWidth / 2;

    const headerColor = [155, 89, 182];
    const darkTextColor = [38, 38, 38];

    doc.setFontSize(20);
    doc.setTextColor(...headerColor);
    doc.text("Employee Payslip", centerX, 20, { align: "center" });

    doc.setFontSize(12);
    doc.setTextColor(...darkTextColor);
    const today = new Date().toLocaleDateString();
    doc.text(`Date Issued: ${today}`, margin, 30);

    doc.setFontSize(14);
    doc.setTextColor(...headerColor);
    doc.text("Employee Information", margin, 40);

    autoTable(doc, {
      startY: 45,
      head: [["Field", "Value"]],
      body: [
        ["Employee ID", emp.employeeId],
        ["Name", emp.name],
        ["Department", emp.department],
        ["Position", emp.position],
      ],
      theme: "grid",
      headStyles: { fillColor: headerColor, textColor: 255 },
      styles: {
        fontSize: 11,
        cellPadding: 3,
        textColor: darkTextColor,
        lineColor: darkTextColor,
      },
      margin: { left: margin, right: margin },
    });

    const salaryY = doc.lastAutoTable.finalY + 10;
    doc.setFontSize(14);
    doc.setTextColor(...headerColor);
    doc.text("Salary Breakdown", margin, salaryY);

    autoTable(doc, {
      startY: salaryY + 5,
      head: [["Description", "Amount"]],
      body: [
        ["Hours Worked", emp.hoursWorked],
        ["Leave Deductions", `R${emp.leaveDeductions}`],
        ["Final Salary", `R${emp.finalSalary}`],
      ],
      theme: "striped",
      headStyles: { fillColor: headerColor, textColor: 255 },
      styles: {
        fontSize: 11,
        cellPadding: 3,
        textColor: darkTextColor,
        lineColor: darkTextColor,
        fillColor: [245, 245, 245],
      },
      margin: { left: margin, right: margin },
    });

    doc.setFontSize(10);
    doc.setTextColor(...darkTextColor);
    doc.text("Generated by HR System", centerX, pageHeight - 20, { align: "center" });

    doc.save(`Employee_${emp.employeeId}_Payslip.pdf`);
  };

  // Styles converted from your CSS
  const sectionStyle = {
    width: "100%",
    minHeight: "100vh",
    color: "#393739",
    backgroundColor: "#f0f0f0",
    padding: 40,
    overflow: "hidden",
    transition: "all 0.35s ease-in-out",
    fontFamily: "'Raleway', sans-serif",
  };

  const tableResponsiveStyle = {
  };

  const payrollTableStyle = {
    width: "100%",
    border: "none",
    borderRadius: 40,
    borderCollapse: "separate",
  };

  const thStyle = {
    border: "1px solid #ddd",
    padding: 8,
    textAlign: "left",
    backgroundColor: "#262626",
    color: "#fff",
  };

  const tdStyle = {
    border: "1px solid #ddd",
    padding: 8,
    textAlign: "left",
    fontWeight: 500,
  };

  const buttonStyle = {
    border: "none",
    color: "#fff",
    fontWeight: 600,
    fontSize: "0.9rem",
    backgroundImage: "linear-gradient(#7e289e , #9b59b6)",
    borderRadius: 19,
    padding: "9px 45px",
    cursor: "pointer",
    transition: "all 0.3s ease",
  };

  const buttonHoverStyle = {
    backgroundImage: "linear-gradient(#a750c4 , #9b59b6)",
    boxShadow: "0 2px 5px rgba(155, 89, 182, 0.8)",
    transform: "scale(1.01)",
    color: "#fff",
  };

  const modalOverlayStyle = {
    position: "fixed",
    top: 0,
    left: 0,
    width: "100vw",
    height: "100vh",
    background: "rgba(0,0,0,0.5)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 1000,
  };

  const modalContentStyle = {
    background: "#fff",
    padding: 20,
    borderRadius: 8,
    minWidth: 300,
    maxWidth: 400,
  };

  const headingStyle = {
    fontWeight: 600,
    marginTop: "1rem",
    marginBottom: "1rem",
  };

  // Helper to handle hover styles inline for buttons (View Payslip)
  const [hoveredBtnId, setHoveredBtnId] = useState(null);

  return (
    <section style={sectionStyle}>
      <h1 style={headingStyle}>Payroll Page</h1>

      <div style={{ marginBottom: 20, fontSize: "16px", fontWeight: "bold" }}>
        ðŸ§¾ Total Monthly Payroll Cost: R{totalMonthlyPay.toLocaleString()}
      </div>

      <div style={tableResponsiveStyle}>
        <table style={payrollTableStyle} id="payroll-table">
          <thead>
            <tr>
              <th style={thStyle}>Employee ID</th>
              <th style={thStyle}>Name</th>
              <th style={thStyle}>Department</th>
              <th style={thStyle}>Position</th>
              <th style={thStyle}>Hours Worked</th>
              <th style={thStyle}>Leave Deductions</th>
              <th style={thStyle}>Final Salary</th>
              <th style={thStyle}>Payslip</th>
            </tr>
          </thead>
          <tbody>
            {employees.map((emp) => (
              <tr key={emp.employeeId}>
                <td style={tdStyle}>{emp.employeeId}</td>
                <td style={tdStyle}>{emp.name}</td>
                <td style={tdStyle}>{emp.department}</td>
                <td style={tdStyle}>{emp.position}</td>
                <td style={tdStyle}>{emp.hoursWorked}</td>
                <td style={tdStyle}>R{emp.leaveDeductions}</td>
                <td style={tdStyle}>R{emp.finalSalary}</td>
                <td style={tdStyle}>
                  <button
                    style={
                      hoveredBtnId === emp.employeeId
                        ? { ...buttonStyle, ...buttonHoverStyle }
                        : buttonStyle
                    }
                    onMouseEnter={() => setHoveredBtnId(emp.employeeId)}
                    onMouseLeave={() => setHoveredBtnId(null)}
                    onClick={() => setSelectedEmployee(emp)}
                  >
                    View Payslip
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {selectedEmployee && (
        <div
          style={modalOverlayStyle}
          onClick={() => setSelectedEmployee(null)}
          role="dialog"
          aria-modal="true"
        >
          <div
            style={modalContentStyle}
            onClick={(e) => e.stopPropagation()}
          >
            <h2 style={{ marginBottom: 16 }}>Payslip Preview</h2>
            <p>
              <strong>Employee ID:</strong> {selectedEmployee.employeeId}
            </p>
            <p>
              <strong>Name:</strong> {selectedEmployee.name}
            </p>
            <p>
              <strong>Department:</strong> {selectedEmployee.department}
            </p>
            <p>
              <strong>Position:</strong> {selectedEmployee.position}
            </p>
            <p>
              <strong>Hours Worked:</strong> {selectedEmployee.hoursWorked}
            </p>
            <p>
              <strong>Leave Deductions:</strong> R{selectedEmployee.leaveDeductions}
            </p>
            <p>
              <strong>Final Salary:</strong> R{selectedEmployee.finalSalary}
            </p>

            <button
              style={{ ...buttonStyle, marginTop: 10, width: "100%" }}
              onClick={() => downloadPayslipPDF(selectedEmployee)}
              onMouseEnter={(e) =>
                Object.assign(e.target.style, buttonHoverStyle)
              }
              onMouseLeave={(e) => Object.assign(e.target.style, buttonStyle)}
            >
              Download PDF
            </button>

            <button
              style={{ ...buttonStyle, marginTop: 10, width: "100%" }}
              onClick={() => setSelectedEmployee(null)}
              onMouseEnter={(e) =>
                Object.assign(e.target.style, buttonHoverStyle)
              }
              onMouseLeave={(e) => Object.assign(e.target.style, buttonStyle)}
            >
              Close
            </button>
          </div>
        </div>
      )}
    </section>
  );
};

export default PayRoll;
